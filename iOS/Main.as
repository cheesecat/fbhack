package{import flash.display.Sprite;import flash.display.SimpleButton;import flash.text.TextField; import flash.text.TextFormat; import flash.text.TextFieldAutoSize;import flash.events.Event;import flash.events.TouchEvent;import flash.events.GeolocationEvent;import flash.desktop.NativeApplication;import flash.desktop.SystemIdleMode;import flash.net.SharedObject;import flash.net.URLRequest;import flash.net.URLLoader;import flash.net.URLRequest;import flash.net.URLRequestMethod;import flash.ui.Multitouch;import flash.ui.MultitouchInputMode;import flash.geom.Point;import flash.geom.Rectangle;import flash.events.MouseEvent;import flash.events.IOErrorEvent;import flash.media.StageWebView;import flash.events.StatusEvent;import flash.sensors.Geolocation;import flash.media.Camera;import flash.media.Video;import flash.geom.Point;import flash.display.BitmapData;import flash.utils.ByteArray;import assets.PushButton;import com.adobe.images.JPGEncoder;import com.hurlant.util.Base64;import com.adobe.serialization.json.JSON;import flash.net.URLRequestMethod;import flash.net.URLVariables;public class Main extends Sprite{	private var _application : NativeApplication;	private var _sharedObject : SharedObject;		private var _geolocation : Geolocation;	private var _log : TextField;		private var _video : Video;	private var _videoContainer : Sprite;		private var _lastLocation : Point;	private var _sending : Boolean = false;		private var _pushButton : SimpleButton;		public function Main()	{		this._application = NativeApplication.nativeApplication;		this._application.systemIdleMode = SystemIdleMode.KEEP_AWAKE;				this._application.addEventListener( Event.ACTIVATE, this._activate );		this._application.addEventListener( Event.DEACTIVATE, this._deactivate );		this._application.addEventListener( Event.EXITING, this._exiting );				this._initialize();				// @see http://www.adobe.com/devnet/flash/articles/saving_state_air_apps.html		this._loadSharedObject();	}		private function _activate( event : Event ) : void	{		this._application.systemIdleMode = SystemIdleMode.KEEP_AWAKE;	}		private function _deactivate( event : Event ) : void	{		this._saveSharedObject();		this._application.systemIdleMode = SystemIdleMode.NORMAL;				this._log.text = "";	}		private function _initialize() : void	{		this._log = new TextField();				var format : TextFormat = new TextFormat( "_sans", 12 );		format.color = 0x333333;				this._log.defaultTextFormat = format;		this._log.border = true;		this._log.wordWrap = true;		this._log.multiline = true;		this._log.x = 10;		this._log.y = 10;		this._log.height = stage.stageHeight - 20;		this._log.width = stage.stageWidth - 20;		this._log.visible = false;				this.addChild( this._log );				this._log.appendText( "4" );				this._videoContainer = new Sprite();		this._videoContainer.visible = false;		this.addChildAt( this._videoContainer, 0 );				var camera : Camera = Camera.getCamera();		if ( camera != null ) 		{			// TODO: valid rotation.			this._video = new Video( camera.width, camera.height );			this._video.attachCamera( camera );			this._videoContainer.addChild( this._video );		} 		else 		{			this._log.appendText( "You need a camera." );		}				this._pushButton = new PushButton();		this._pushButton.x = this.stage.stageWidth / 2;		this._pushButton.y = this.stage.stageHeight / 2;		this._pushButton.addEventListener( MouseEvent.CLICK, this._clickHandler, false, 0, true );		this.addChild( this._pushButton );	}		private function _exiting( event : Event ) : void	{		this._saveSharedObject();				this._application.removeEventListener( Event.ACTIVATE, this._activate );		this._application.removeEventListener( Event.DEACTIVATE, this._deactivate );		this._application.removeEventListener( Event.EXITING, this._exiting );				this._application.systemIdleMode = SystemIdleMode.NORMAL;	}		private function _loadSharedObject() : void	{		this._make();	}		private function _saveSharedObject() : void	{	}		private function _make() : void	{		/*		// TODO: Authorization.		var webView : StageWebView = new StageWebView();		webView.stage = this.stage;		webView.viewPort = new Rectangle( 0, 0, stage.stageWidth, stage.stageHeight );		webView.loadURL( "http://www.facebook.com" );		*/				this._log.appendText( "make()" );				if ( Geolocation.isSupported )		{ 			this._geolocation = new Geolocation();			this._geolocation.addEventListener( GeolocationEvent.UPDATE, this._geolocationUpdateHandler );			this._geolocation.setRequestedUpdateInterval( 100 );		}		else		{			this._log.appendText( "Geolocation not supported." );		}	}		private function _geolocationUpdateHandler( event : GeolocationEvent ) : void	{		this._lastLocation = new Point( event.latitude, event.longitude );				this._log.appendText( this._lastLocation.toString() );				if ( this._sending )		{			this._log.appendText( "Sending..." );						this._pushButton.alpha = 0.5;						this._sending = false;						// Set up a new bitmapdata object that matches the dimensions of the captureContainer.			var bitmapData : BitmapData = new BitmapData( this._videoContainer.width, this._videoContainer.height );			bitmapData.draw( this._videoContainer );			// Create a new byte array.			var jpegEncoder : JPGEncoder = new JPGEncoder( 80 );			var byteArray : ByteArray = jpegEncoder.encode( bitmapData );						var image : String = Base64.encodeByteArray( byteArray );						//this._log.appendText( image );						var jsonData : Object = {};			jsonData.image = image;			jsonData.lat = this._lastLocation.x;			jsonData.long = this._lastLocation.y;						var json : String = JSON.encode( jsonData );						var url : String = "http://hack.ccat.pl/index.php/help/notify/1";						var loader : URLLoader = new URLLoader();			loader.addEventListener( Event.COMPLETE, localizationCompleteHandler );						this._log.appendText( url );						var variables : URLVariables = new URLVariables();			variables.data = json;						var request : URLRequest = new URLRequest( url );			request.method = URLRequestMethod.POST;			request.data = variables;			try			{				loader.load( request );			}			catch ( error : Error ) 			{				this._log.appendText( "Unable to load requested document." );			}		}	}		private function localizationCompleteHandler( event : Event ) : void	{		this._log.appendText( event.toString() );				var loader : URLLoader = URLLoader( event.target );		this._log.appendText( "" + loader.data );				this._pushButton.alpha = 1.0;	}		private function _clickHandler( event : MouseEvent ) : void	{		this._log.appendText( "click" );		this._sending = true;				this._pushButton.alpha = 0.5;	}}}